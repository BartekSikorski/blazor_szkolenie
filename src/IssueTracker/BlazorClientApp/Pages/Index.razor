@page "/"
@using Bogus
@inject IJSRuntime JS
@inject Faker<User> userFaker
@implements IDisposable

<h1>@content</h1>

<button @onclick="ShowAlert" class="waves-effect waves-light btn">Show alert</button>
<button @onclick="ShowUser" class="waves-effect waves-light btn">Show user</button>
<button @onclick="ShowConfirm" class="waves-effect waves-light btn">Show confirm</button>
<button @onclick="ShowPrompt" class="waves-effect waves-light btn">Show prompt</button>
<button @onclick="ShowEval" class="waves-effect waves-light btn">Show eval</button>
<button @onclick="TriggerDotNetInstanceMethod" class="waves-effect waves-light btn">Show Hello Message</button>


@code {
    private string name = "John";
    private static string content;

    // private static Index index;

    DotNetObjectReference<Index> indexReference { get; set; }

    protected override void OnInitialized()
    {
        // index = this;

        indexReference = DotNetObjectReference.Create(this);
    }


    public void Dispose()
    {
        content = string.Empty;
    }


    private async Task ShowAlert()
    {
        await JS.InvokeVoidAsync("alert", "Hello World!");
    }

    private async Task ShowUser()
    {
        var user = userFaker.Generate();

        await JS.InvokeVoidAsync("console.log", "Hello World!", user);
    }

    private async Task ShowConfirm()
    {        
        var result = await JS.InvokeAsync<bool>("confirm", "Are you sure?");
    }

    private async Task ShowPrompt()
    {
        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Index.razor.js");

        await module.InvokeVoidAsync("showPrompt", "What's your name?");

    }


    private async Task ShowEval()
    {
        var scriptToEval = "info = function(text){alert(text);}";
        await JS.InvokeVoidAsync("eval", scriptToEval);
        await JS.InvokeVoidAsync("info", "Blazor");
    }

    // js console: DotNet.invokeMethodAsync("BlazorClientApp", "JSToCSCall", "Hello World!")
    [JSInvokable]
    public static void JSToCSCall(string text)
    {
        content = text;
        // index.StateHasChanged();
    }

    public async Task TriggerDotNetInstanceMethod()
    {
        var result = await JS.InvokeAsync<string>("sayHello1", indexReference);
    }

    [JSInvokable]
    public string GetHelloMessage() => $"Hello, {name}!";


    
}


