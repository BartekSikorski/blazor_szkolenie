@page "/Users"
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.SignalR.Client

<a class="waves-effect waves-light btn" href="/users/new">Add new user</a>

<div>
    <SearchPanel OnSearch="Search" />
</div>

@if (users is null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudTable Items="@users" Dense="false" Hover="true" Bordered="true" Striped="true" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Użytkownicy</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Sign</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Position</MudTh>
            <MudTh>Molar mass</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                <MudTd DataLabel="LastName">@context.LastName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
}

@code {


    [CascadingParameter]
    public ModalDialog modalDialog { get; set;  }

    private MarkupString html;
    private string searchString1 = "";
    private User selectedItem1 = null;
    private HashSet<User> selectedItems = new HashSet<User>();

    private bool FilterFunc1(User user) => FilterFunc(user, searchString1);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async Task Search(string searchText)
    {
        var searchCriteria = new UserSearchCriteria { FirstName = searchText };

        users = await Api.GetBySearchCriteriaAsync(searchCriteria);
    }

    private async Task Remove(User user)
    {
        // hint: użyj HtmlSanitizer https://github.com/mganss/HtmlSanitizer
        string text = $"<p>Czy chcesz usunąć {user.FirstName} {user.LastName}</p>";

        html = new MarkupString(text);

        // modalDialog.ChildContent = @<p>Czy chcesz usunąć @user.FirstName @user.LastName</p>;

        RenderFragment renderFragment = builder => MyRender(builder, user);
        modalDialog.ChildContent = renderFragment;

        // modalDialog.OnResult = new EventCallbackFactory().Create<bool>(this, result => RemoveUser(result, user));

        modalDialog.OnResult = Test<bool>(result => RemoveUser(result, user));
        

        modalDialog.Open();
    }

    private EventCallback<T> Test<T>(Action<T> action)
    {
        return new EventCallbackFactory().Create<T>(this, action);
    }

    private async Task RemoveUser(bool result, User user)
    {
        if (result)
        {
            await Api.RemoveAsync(user.Id);
        }
    }

    private void MyRender(RenderTreeBuilder renderTreeBuilder, User user)
    {
        renderTreeBuilder.OpenElement(0, "p");
        renderTreeBuilder.AddContent(1, $"Czy chcesz usunąć {user.FirstName} {user.LastName}");
        renderTreeBuilder.CloseElement();

    }

}