@page "/Users"
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.SignalR.Client


<h3>Hello Users!</h3>



<a class="waves-effect waves-light btn" href="/users/new">Add new user</a>

<div>
    <SearchPanel OnSearch="Search" />
</div>

@if (users is null)
{
    <ProgressBar>
        <em>Loading users...</em>
    </ProgressBar>
}
else
{
    <EntityTableTemplate Entities="users">
        <HeaderTemplate>
            <th>First name</th>
            <th>Last name</th>
            <th>Email</th>
            <th></th>
        </HeaderTemplate>
        <RowTemplate Context="user">
            <td><a href="/users/edit/@user.Id">@user.FirstName</a></td>
            <td><a href="/users/edit/@user.Id">@user.LastName</a></td>
            <td>@user.Email</td>
            <td>
                <a href="/users/edit/@user.Id" class="waves-effect waves-light btn">Edit</a>
                <button type="button" class="waves-effect waves-light btn" @onclick="@(()=>Remove(user))">Remove</button>
            </td>
        </RowTemplate>
    </EntityTableTemplate>

    @html

}

@code {


    [CascadingParameter]
    public ModalDialog modalDialog { get; set;  }

    private MarkupString html;


    private async Task Search(string searchText)
    {
        var searchCriteria = new UserSearchCriteria { FirstName = searchText };

        users = await Api.GetBySearchCriteriaAsync(searchCriteria);
    }

    private async Task Remove(User user)
    {
        // hint: użyj HtmlSanitizer https://github.com/mganss/HtmlSanitizer
        string text = $"<p>Czy chcesz usunąć {user.FirstName} {user.LastName}</p>";

        html = new MarkupString(text);

        // modalDialog.ChildContent = @<p>Czy chcesz usunąć @user.FirstName @user.LastName</p>;

        RenderFragment renderFragment = builder => MyRender(builder, user);
        modalDialog.ChildContent = renderFragment;

        // modalDialog.OnResult = new EventCallbackFactory().Create<bool>(this, result => RemoveUser(result, user));

        modalDialog.OnResult = Test<bool>(result => RemoveUser(result, user));
        

        modalDialog.Open();
    }

    private EventCallback<T> Test<T>(Action<T> action)
    {
        return new EventCallbackFactory().Create<T>(this, action);
    }

    private async Task RemoveUser(bool result, User user)
    {
        if (result)
        {
            await Api.RemoveAsync(user.Id);
        }
    }

    private void MyRender(RenderTreeBuilder renderTreeBuilder, User user)
    {
        renderTreeBuilder.OpenElement(0, "p");
        renderTreeBuilder.AddContent(1, $"Czy chcesz usunąć {user.FirstName} {user.LastName}");
        renderTreeBuilder.CloseElement();

    }

}