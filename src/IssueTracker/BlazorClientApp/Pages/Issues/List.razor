@page "/Issues"
@page "/Zgloszenia"
@using BlazorClientApp.Features.Issue;
@using Fluxor;
@using Fluxor.Blazor.Web.Components;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
@inject HubConnection connection

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<IssueState> IssueState

@implements IAsyncDisposable

<h3>Issues</h3>

@if (IssueState.Value.IsLoading)
{
    <ProgressBar />    
}
else
{
    <ul>
        @foreach (var issue in IssueState.Value.Issues)
        {
            <li><strong>@issue.Title</strong> @issue.Description</li>
        }
    </ul>
}

@code {

    protected async override Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new GetAllIssuesAction());

        navigationManager.LocationChanged += HandleLocationChanged;

        // await Task.Delay(TimeSpan.FromSeconds(3));
        // issues = await Api.GetAllAsync();

        // connection.On<Issue>("IssueAdded", issue =>
        // {
        //     var u = issues.ToList();

        //     u.Add(issue);

        //     issues = u.AsEnumerable();

        //     StateHasChanged();

        // });

      //  await connection.StartAsync();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Console.WriteLine(e.Location);
    }

    protected virtual async ValueTask DisposeAsync(bool disposing)
    {
        navigationManager.LocationChanged -= HandleLocationChanged;

      //  await connection.StopAsync();

    }

    public async ValueTask DisposeAsync()
    {
        await DisposeAsync(true); GC.SuppressFinalize(this);
    }


}
