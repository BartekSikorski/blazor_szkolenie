@page "/Issues"
@page "/Zgloszenia"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
@inject IssueApiService Api
@*  PM> Install-Package Microsoft.AspNetCore.SignalR.Client *@
@inject HubConnection connection

@implements IAsyncDisposable

<h3>Issues</h3>

@if (issues is null)
{
    <ProgressBar />    
}
else
{
    <ul>
        @foreach (var issue in issues)
        {
            <li><strong>@issue.Title</strong> @issue.Description</li>
        }
    </ul>
}

@code {
    private IEnumerable<Issue> issues;

    protected async override Task OnInitializedAsync()
    {
        navigationManager.LocationChanged += HandleLocationChanged;

        await Task.Delay(TimeSpan.FromSeconds(3));
        issues = await Api.GetAllAsync();


        connection.On<Issue>("IssueAdded", issue =>
        {
            var u = issues.ToList();

            u.Add(issue);

            issues = u.AsEnumerable();

            StateHasChanged();

        });

        await connection.StartAsync();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Console.WriteLine(e.Location);
    }

    protected virtual async ValueTask DisposeAsync(bool disposing)
    {
        navigationManager.LocationChanged -= HandleLocationChanged;

        await connection.StopAsync();

    }

    public async ValueTask DisposeAsync()
    {
        await DisposeAsync(true); GC.SuppressFinalize(this);
    }


}
